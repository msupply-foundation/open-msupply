fragment StockLineRow on StockLineNode {
  availableNumberOfPacks
  batch
  costPricePerPack
  expiryDate
  id
  itemId
  locationId
  locationName
  onHold
  packSize
  sellPricePerPack
  storeId
  totalNumberOfPacks
  supplierName
  location {
    ...LocationRow
  }
  item {
    code
    name
    unitName
  }
  barcode
}

fragment RepackStockLine on RepackStockLineNode {
  location {
    ...LocationRow
  }
  packSize
  numberOfPacks
}

fragment Repack on RepackNode {
  id
  datetime
  repackId
  from {
    ...RepackStockLine
  }
  to {
    ...RepackStockLine
  }
}

fragment InvoiceRow on InvoiceNode {
  id
  lines {
    nodes {
      id
      itemName
      numberOfPacks
      itemCode
      stockLine {
        id
      }
    }
  }
}

fragment LedgerRow on LedgerNode {
  datetime
  id
  invoiceType
  itemId
  name
  quantity
  reason
  stockLineId
  storeId
}

query stockLines(
  $first: Int
  $offset: Int
  $key: StockLineSortFieldInput!
  $desc: Boolean
  $filter: StockLineFilterInput
  $storeId: String!
) {
  stockLines(
    storeId: $storeId
    filter: $filter
    page: { first: $first, offset: $offset }
    sort: { key: $key, desc: $desc }
  ) {
    ... on StockLineConnector {
      __typename
      nodes {
        __typename
        ...StockLineRow
      }
      totalCount
    }
  }
}

query stockLine($id: String!, $storeId: String!) {
  stockLines(storeId: $storeId, filter: { id: { equalTo: $id } }) {
    ... on StockLineConnector {
      __typename
      nodes {
        __typename
        ...StockLineRow
      }
      totalCount
    }
  }
}

query ledger(
  $key: LedgerSortFieldInput!
  $desc: Boolean
  $filter: LedgerFilterInput
  $storeId: String!
) {
  ledger(
    storeId: $storeId
    filter: $filter
    # page: { first: $first, offset: $offset }
    sort: { key: $key, desc: $desc }
  ) {
    ... on LedgerConnector {
      __typename
      nodes {
        __typename
        ...LedgerRow
      }
      totalCount
    }
  }
}

mutation updateStockLine($input: UpdateStockLineInput!, $storeId: String!) {
  updateStockLine(input: $input, storeId: $storeId) {
    ... on StockLineNode {
      __typename
      ...StockLineRow
    }
  }
}

query repack($invoiceId: String!, $storeId: String!) {
  repack(invoiceId: $invoiceId, storeId: $storeId) {
    ... on RepackNode {
      __typename
      ...Repack
    }
  }
}

query repacksByStockLine($stockLineId: String!, $storeId: String!) {
  repacksByStockLine(stockLineId: $stockLineId, storeId: $storeId) {
    ... on RepackConnector {
      nodes {
        ...Repack
      }
      totalCount
    }
  }
}

mutation insertRepack($input: InsertRepackInput!, $storeId: String!) {
  insertRepack(input: $input, storeId: $storeId) {
    ... on InvoiceNode {
      __typename
      ...InvoiceRow
    }
    ... on InsertRepackError {
      __typename
      error {
        description
        ... on StockLineReducedBelowZero {
          __typename
          description
        }
        ... on CannotHaveFractionalPack {
          __typename
          description
        }
      }
    }
  }
}

mutation createInventoryAdjustment(
  $input: CreateInventoryAdjustmentInput!
  $storeId: String!
) {
  createInventoryAdjustment(input: $input, storeId: $storeId) {
    __typename
    ... on InvoiceNode {
      __typename
      ...InvoiceRow
    }
    ... on CreateInventoryAdjustmentError {
      __typename
      error {
        description
        ... on StockLineReducedBelowZero {
          __typename
          description
        }
      }
    }
  }
}

mutation insertStockLine($input: InsertStockLineInput!, $storeId: String!) {
  insertStockLine(input: $input, storeId: $storeId) {
    ... on StockLineNode {
      __typename
      ...StockLineRow
    }
  }
}
