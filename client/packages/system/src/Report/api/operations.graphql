fragment ReportRow on ReportNode {
  context
  id
  name
  subContext
  isCustom
  argumentSchema {
    id
    type
    jsonSchema
    uiSchema
  }
}

query report($storeId: String!, $id: String!) {
  report(storeId: $storeId, id: $id) {
    ...ReportRow
  }
}

query reports(
  $storeId: String!
  $key: ReportSortFieldInput!
  $desc: Boolean
  $filter: ReportFilterInput
) {
  reports(
    storeId: $storeId
    sort: { key: $key, desc: $desc }
    filter: $filter
  ) {
    ... on ReportConnector {
      nodes {
        __typename
        ...ReportRow
      }
      totalCount
    }
  }
}

query generateReport(
  $storeId: String!
  $reportId: String!
  $dataId: String
  $arguments: JSON
  $format: PrintFormat
  $sort: PrintReportSortInput
  $currentLanguage: String
) {
  generateReport(
    dataId: $dataId
    reportId: $reportId
    storeId: $storeId
    format: $format
    arguments: $arguments
    sort: $sort
    currentLanguage: $currentLanguage
  ) {
    ... on PrintReportNode {
      __typename
      fileId
    }
    ... on PrintReportError {
      __typename
      error {
        ... on FailedToFetchReportData {
          __typename
          description
          errors
        }
        description
      }
    }
  }
}
