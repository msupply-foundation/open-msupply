fragment AssetCatalogueItem on AssetCatalogueItemNode {
  assetCategoryId
  assetClassId
  assetTypeId
  code
  id
  manufacturer
  model
  subCatalogue
  assetClass {
    name
  }
  assetCategory {
    name
  }
  assetType {
    name
  }
  properties
}

fragment AssetProperty on AssetPropertyNode {
  id
  key
  name
  allowedValues
  valueType
}

fragment AssetLog on AssetLogNode {
  comment
  id
  logDatetime
  reason {
    reason
  }
  status
  type
  user {
    firstName
    lastName
    username
    jobTitle
  }
}

fragment AssetLogReason on AssetLogReasonNode {
  id
  assetLogStatus
  reason
}

query assetCatalogueItems(
  $first: Int
  $offset: Int
  $key: AssetCatalogueItemSortFieldInput!
  $desc: Boolean
  $filter: AssetCatalogueItemFilterInput
) {
  assetCatalogueItems(
    page: { first: $first, offset: $offset }
    sort: { key: $key, desc: $desc }
    filter: $filter
  ) {
    ... on AssetCatalogueItemConnector {
      nodes {
        ...AssetCatalogueItem
      }
      totalCount
    }
  }
}

query assetCatalogueItemById($assetCatalogueItemId: String!) {
  assetCatalogueItems(filter: { id: { equalTo: $assetCatalogueItemId } }) {
    ... on AssetCatalogueItemConnector {
      nodes {
        ...AssetCatalogueItem
      }
      totalCount
    }
  }
}

query assetClasses($sort: [AssetClassSortInput!]) {
  assetClasses(sort: $sort) {
    ... on AssetClassConnector {
      nodes {
        id
        name
      }
      totalCount
    }
  }
}

query assetTypes($sort: [AssetTypeSortInput!], $filter: AssetTypeFilterInput) {
  assetTypes(sort: $sort, filter: $filter) {
    ... on AssetTypeConnector {
      nodes {
        id
        name
        categoryId
      }
      totalCount
    }
  }
}

query assetCategories(
  $sort: [AssetCategorySortInput!]
  $filter: AssetCategoryFilterInput
) {
  assetCategories(sort: $sort, filter: $filter) {
    ... on AssetCategoryConnector {
      nodes {
        id
        name
        classId
      }
      totalCount
    }
  }
}

query assetProperties($filter: AssetPropertyFilterInput) {
  assetProperties(filter: $filter) {
    ... on AssetPropertyConnector {
      __typename
      nodes {
        __typename
        ...AssetProperty
      }
    }
  }
}

query assetLogReasons(
  $filter: AssetLogReasonFilterInput
  $sort: [AssetLogReasonSortInput!]
  $storeId: String!
) {
  assetLogReasons(filter: $filter, sort: $sort, storeId: $storeId) {
    ... on AssetLogReasonConnector {
      __typename
      totalCount
      nodes {
        __typename
        ...AssetLogReason
      }
    }
  }
}

mutation insertAssetCatalogueItem(
  $input: InsertAssetCatalogueItemInput!
  $storeId: String!
) {
  centralServer {
    assetCatalogue {
      insertAssetCatalogueItem(input: $input, storeId: $storeId) {
        ... on AssetCatalogueItemNode {
          id
        }
        ... on InsertAssetCatalogueItemError {
          __typename
          error {
            ... on UniqueValueViolation {
              __typename
              field
              description
            }
            ... on UniqueCombinationViolation {
              __typename
              fields
              description
            }
            ... on RecordAlreadyExist {
              __typename
              description
            }
            description
          }
        }
      }
    }
  }
}

mutation deleteAssetCatalogueItem($assetCatalogueItemId: String!) {
  centralServer {
    assetCatalogue {
      deleteAssetCatalogueItem(assetCatalogueItemId: $assetCatalogueItemId) {
        ... on DeleteResponse {
          __typename
          id
        }
        ... on DeleteAssetCatalogueItemError {
          error {
            description
          }
        }
      }
    }
  }
}

mutation insertAssetLogReason($input: InsertAssetLogReasonInput!) {
  centralServer {
    logReason {
      insertAssetLogReason(input: $input) {
        ... on AssetLogReasonNode {
          __typename
          id
          reason
        }
        ... on InsertAssetLogReasonError {
          __typename
          error {
            description
          }
        }
      }
    }
  }
}

mutation deleteLogReason($reasonId: String!) {
  centralServer {
    logReason {
      deleteLogReason(reasonId: $reasonId) {
        ... on DeleteResponse {
          __typename
          id
        }
        ... on DeleteAssetLogReasonError {
          __typename
          error {
            description
          }
        }
      }
    }
  }
}
