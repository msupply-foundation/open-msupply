apply plugin: 'com.android.application'
import groovy.json.JsonSlurper

def getVersionFromPackageJson() {
   def inputFile = new File("$rootDir/../../../package.json")
   def packageJson = new JsonSlurper().parseText(inputFile.text)

   return packageJson["version"]
}

def getVersionCodeFromVersionName(versionName) {
    // trimmed version = version without candidate (only consider first part of version, before any `-`)
    def (trimmedVersion) = versionName.tokenize('-')
    def (major, minor, patch) = trimmedVersion.tokenize('.')
    return (major.toInteger() * 1000000) + (minor.toInteger() * 10000) + (patch.toInteger() * 100)
}


android {
    namespace "org.openmsupply.client"
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "org.openmsupply.client"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        // Get version from package.json in the repo root
        versionName getVersionFromPackageJson() 
        versionCode getVersionCodeFromVersionName(versionName)
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        aaptOptions {
             // Files and dirs to omit from the packaged assets dir, modified to accommodate modern web apps.
             // Default: https://android.googlesource.com/platform/frameworks/base/+/282e181b58cf72b6ca770dc7ca5f91f135444502/tools/aapt/AaptAssets.cpp#61
            ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~'
        }
        setProperty("archivesBaseName", "open-msupply-$versionName")

        project.logger.lifecycle("versionName: $versionName versionCode: $versionCode")
    }
    signingConfigs {
        release {
            // Check for release and if in release mode try to load signing info
            if (project.gradle.startParameter.taskNames.any { it.toLowerCase().contains('release') }) {
                def Properties localProps = new Properties()
                localProps.load(new FileInputStream(file('../local.properties')))

                if (localProps['storeFile'] == null || localProps['keyAlias'] == null || localProps['keyAlias'] == null || localProps['keyAlias'] == null) {
                    throw new Exception('Signing info missing in local.properties')
                }

                storeFile file(localProps['storeFile'])
                keyAlias localProps['keyAlias']
                storePassword localProps['storePassword']
                keyPassword localProps['keyPassword']
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
}

repositories {
    flatDir{
        dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    implementation "androidx.coordinatorlayout:coordinatorlayout:$androidxCoordinatorLayoutVersion"
    implementation "androidx.core:core-splashscreen:$coreSplashScreenVersion"
    implementation project(':capacitor-android')
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion"
    implementation project(':capacitor-cordova-android-plugins')
    implementation "com.google.android.gms:play-services-location:$playServicesLocationVersion"
}

apply from: 'capacitor.build.gradle'

try {
    def servicesJSON = file('google-services.json')
    if (servicesJSON.text) {
        apply plugin: 'com.google.gms.google-services'
    }
} catch(Exception e) {
    logger.info("google-services.json not found, google-services plugin not applied. Push Notifications won't work")
}
